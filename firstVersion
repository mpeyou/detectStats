function [avgWidth, stdWidth, avgDistBtRising, stdDistBtRising, shortenedData, middleLinePlot,riseEdge, fallEdge] = detectStats(modedData,numSymbols,samplesPerPeriod,exact,sampleRate,decimalRound)
%//////////////////////////////////////////////////////////////////////////
%// Name: detectStats                                                    //       
%//                                                                      //
%// Call: [avgDistBtRising, stdDistBtRising,avgWidth, stdWidth, avgPos,  //
%//       stdPos, riseEdge, fallEdge,distanceBtFallRise] = detectStats   //
%//       (modedData,numSymbols,samplesPerPeriod,exact,decimalRound,     //
%//       sampleRate)                                                    //         
%//                                                                      //
%// Type: function                                                       //
%//                                                                      //
%// Inputs:                                                              //  
%//       inputData = the input data points (in an array)                //
%//                                                                      //
%//       samplesPerSymbol = how many samples should be in each symbol?  //
%//                                                                      //
%//       pulseAmp= amplitude that the high portions of the signal reach //
%//                                                                      //
%//       sampleRate = rate at which the data is sampled, same as above  //
%//                                                                      //
%//       snr=signal to noise ratio,used when adding noise to the signal //
%//                                                                      //
%//       modType => PWM = 1  PPM=2                                      //
%//                                                                      // 
%//                                                                      //
%//                                                                      //
%// Outputs:                                                             //
%//                                                                      //         
%//     avgWidth            = average distance between rising and        //
%//                           falling edges                              //
%//                                                                      //
%//     stdWidth            = standard deviation of distance between     //
%//                           rising and falling edges                   //
%//                                                                      //
%//     avgDistBtRising     = average distance between rising edges //     //
%//                                                                      //
%//     stdDistBtRising     = standard deviation of distance between     //
%//                           rising edges                               //
%//     riseEdge            = array of positions where the rising edges  //
%//                           are located within the shortened           //
%//                           modedData(which is then called             //
%//                           shortenedModedData, and now starts         //
%//                           on the first rising edge)                  //
%//                                                                      //
%//     fallEdge            = array of positions where the falling edges //
%//                           are located within the shortened modedData //
%//                           (which is then called shortenedModedData,  //
%//                           and now starts on the first rising edge)   //   
%//                                                                      //
%//    distanceBtFallRise  = array of distances between rising and       //
%//                          falling edges                               //
%//                                                                      //  
%//                                                                      //
%//                                                                      //
%// Description:                                                         //
%//   modulates the data in the form you choose (PWM,PPM) then sends the //
%//   modulated data to detectStats to get statistics about the          //
%//   modulated data                                                     //
%//////////////////////////////////////////////////////////////////////////



%*************************************************************************
%**                      Variable Declaration                           **              
%*************************************************************************

%-----------------------------------------
%//Name:riseEdge
%//Purpose: holds the positions of the rising edges within the shortened 
%//array. Is the size of the number of symbols minus 1 because the
%//shortened data array will cut off the first symbol because it has no
%//rising edge

riseEdge = zeros(1,numSymbols-1); 

riseEdge(1)=-1;  
%is a flag that ensures that the second rising edge uses to mark where 
%area (used in finding the pulsePowerMinAverage) stops
%becomes the next first rising edge in
%that pattern

%-----------------------------------------
%//Name:fallEdge
%//Purpose: holds the positions of the rising edges within the shortened 
%//array. Is the size of the number of symbols minus 1 because the
%//shortened data array will cut off the first symbol because it has no
%//rising edge, and therefore theres is one less falling edge
  
 fallEdge = zeros(1,numSymbols-1);  
 
%----------------------------------------- 
%//Name:distanceBtRisingAndFalling
%//Purpose: holds the distance between consecutive rising and falling edge
%//positions

   distanceBtRisingAndFalling= zeros(1,numSymbols-1);    

%----------------------------------------- 
%//Name:alpha
%//Purpose: controls the rate of change of the middleLine
   
   alpha = 0.95;                                       


%----------------------------------------- 
%//Name:firstTenMillisecondsOfSamples
%//Purpose: is the first ten milliseconds by multiplying the 
%//sample rate(samples per second) by 10/1000 to get 10ms of 
%//samples. Might be not a round number of samples so round to 
%//nearest whole number
  
firstTenMillisecondsOfSamples = round(0.01*sampleRate,0);

%----------------------------------------- 
%//Name:middleLine
%//Purpose: middleLine is the point at which to check if there is a rising edge
%//between two points

initialMiddleMax = max(modedData(1:firstTenMillisecondsOfSamples));
initialMiddleMin = min(modedData(1:firstTenMillisecondsOfSamples));

middleLine = (initialMiddleMax+initialMiddleMin)/2;%+initialMiddleMin
                                                             

%----------------------------------------- 
%//Name:modedDataIndex 
%//Purpose: indexes through the modedData array

 modedDataIndex = 1;    

%----------------------------------------- 
%//Name:firstRise
%//Purpose: index of first rising edge in modedData (is high point of 
%//rising edge). Initialized to -1 so that it can be used as a flag and not

  firstRise = -1;   

%----------------------------------------- 
%//Name:riseEdgeIndex
%//Purpose: move through the riseEdge array using this index

riseEdgeIndex = 1;

%----------------------------------------- 
%//Name:fallEdgeIndex
%//Purpose: move through the fallEdge array using this index

fallEdgeIndex = 1;


%*************************************************************************
%**                             Stage 1                                 **              
%*************************************************************************
%find the average Power over the first 10 ms. Used 10 ms because, assuming
%that the minimum sample rate of 250Hz, there should be up down up (rising,
%falling, then rising)edges, and the 2ms just to make the time round. Anyway, use the average
%power over the first 10ms to identify the midLine and therefore find where
%the first up down ups are.

%{
      ______
     |      |          |
     |      |          |
     |      |          |
   __|      |__________|

%}

%---------------------------------------------------------                           
%//                 Find First Rising Edge              //                                                               
%--------------------------------------------------------- 


%------------------------------------------
%//Type: While Loop
%//Exit Condition: the index moving through the moddedData array stays
%//within the first 10 milliseconds of data; firstRise ends the loop after
%//the first rising edge has been found
%------------------------------------------  
while modedDataIndex < firstTenMillisecondsOfSamples && firstRise == -1
  
    if (modedData(modedDataIndex) > middleLine)
        firstRise = modedDataIndex; %make sure you record the high point of the edge as the rising
        break;
    end
    modedDataIndex = modedDataIndex +1;
end


%-------------------------------------------------------------------                              
%//shortend the data array to start right before first rising edge//                                                               
%-------------------------------------------------------------------  

shortenedModedData = horzcat(0,modedData(firstRise:length(modedData))); 
%NEED TO START ON LOWER EDGE OF RISING EDGE so just add a zero to the
%beginning in case first rize is the first index


shortenedData = shortenedModedData;
%^data returned will be the shortened data



%------------------------------------------------------------                                
%//find inital moving averages and rising and falling edges//                                                               
%------------------------------------------------------------   

tenMillisecondsShortenedEnd = firstTenMillisecondsOfSamples - firstRise -1; 

%DO ONE BEFORE THE FIRST RISE BECAUSE NEED TO START ON LOWER EDGE OF 
%RISING EDGE hence the -1

%need to redefine the end of the first ten milliseconds of data because 
%we cut off part of the beginning of the data


%------------------------------------------
%//Type: For Loop
%//Exit Condition: goes from the end of the index of the first rising edge
%//to the end of the first ten milliseconds, which will be in terms of the
%//shortened data Array, not the modedData array
%------------------------------------------ 


for shortenedModedDataIndex = 1:1:tenMillisecondsShortenedEnd 
    
    %if current index is less than middleLine and next index is greater
    %than middleLine, then there is a rising edge (@ the higher point)
    if (shortenedModedData(shortenedModedDataIndex) < middleLine) && (shortenedModedData(shortenedModedDataIndex+1) > middleLine)
        riseEdge(riseEdgeIndex) = shortenedModedDataIndex+1;
        %^will recapture the first rising edge position within the new 
        %shortened array
        
        if(riseEdgeIndex>=2)
            %have to have a falling then rising edge to find the
            %moving min
            movingMinAvg(riseEdgeIndex-1) = mean(shortenedModedData(fallEdge(fallEdgeIndex-1):(riseEdge(riseEdgeIndex)-1)));
        end
        
        %increment the index for the riseEdge array
        riseEdgeIndex = riseEdgeIndex+1;
        
        
    elseif (shortenedModedData(shortenedModedDataIndex) > middleLine) && (shortenedModedData(shortenedModedDataIndex+1) < middleLine) && (riseEdge(1)~=-1)
        fallEdge(fallEdgeIndex) = shortenedModedDataIndex+1;
        
        movingMaxAvg(fallEdgeIndex) = mean(shortenedModedData(riseEdge(fallEdgeIndex):(fallEdge(fallEdgeIndex)-1)));
        %fallingEdge measured from low point, so take one before that to
        %get the high point of the edge
        
        fallEdgeIndex=fallEdgeIndex+1;
        
    end
end

%take the average of all those values in the intial average arrays to get 
%one single starting value 
initialMovingMaxAvg = mean(movingMaxAvg);                                  
initialMovingMinAvg = mean(movingMinAvg); 

%total average of all the data is the inital middleLine
middleLine = (max(shortenedModedData)-min(shortenedModedData))/2+ min(shortenedModedData);                                               

%plot that records the changes in middleLine
middleLinePlot(1:tenMillisecondsShortenedEnd) = middleLine*ones(1,tenMillisecondsShortenedEnd);


%*************************************************************************
%**                             Stage 2                                 **              
%*************************************************************************

%find the remaining rising and falling edges to calculate statistics


%----------------------------------------------------                              
%//Variable Definitions used in the next while Loop//                                                               
%---------------------------------------------------- 
%{
% R1 = first Rising Edge position within the 3 part sequence of rising-falling-rising edge
% R2 = second Rising Edge within the sequence of rising-falling-rising edge
% F1= first Falling Edge within the sequence of rising-falling-rising edge
% ^ with respect to shortenedModedDataPos
%
% s2MDIndex= shortenedModedDataIndex
%}

pulsePwrAvgMaxLine= initialMovingMaxAvg; %just renaming the initialMovingMaxAvg variable
pulsePwrAvgMinLine= initialMovingMinAvg; %just renaming the initialMovingMinAvg variable

part = 0;
%{
%part 0 indicates the loop is on the first up down up. Otherwise, part 1
%indicates that the loop is past the first up down up, and will declare the
%R1 to be the same as the R2 at the end of the conditionaly statement (so
%as not to skip the second rising edge, and therefore not accurately update
%the middleLine)
%} 


%the next loop should start on the last edge within the first 10 ms
if(max(fallEdge)>max(riseEdge)) %last edge in first 10ms was falling
    shortenedStartIndex = max(fallEdge);
%     R1 = tenMillisecondsShortenedEnd;
%     F1 = max(fallEdge);
elseif (max(fallEdge)<max(riseEdge)) %last edge in first 10ms was rising
    shortenedStartIndex = max(riseEdge);
%     R1 = max(riseEdge);
%     F1 = tenMillisecondsShortenedEnd;
end


%initialized to be the last rising edge from the first 10 ms



%------------------------------------------
%//Type: For Loop
%//Exit Condition: goes from the end of the first ten milliseconds of data
%//to the end of the data (which is the same end as the original moded data,
%//but the indexing will differ

%//Details: 
%//starts on the index of the end of the first 10 ms because that could be
%//the low index for a rising edge and we cannot discard that. this falls
%//under part 0 because you have to first find the rising-falling-rising
%//pattern for part 1 to work correctly

%//Then, when the current index is lower than the middleLine and 
%//the next index is higher than the middleLine, the higher point is
%//recorded as the rising edge. increments the rising edge index.

%//Then moves to falling edge part 0, where the same method is applied 
%//except the falling edge is recorded as the lower point. increments the
%//falling edge index
%------------------------------------------

for s2MDIndex = shortenedStartIndex:1:length(shortenedModedData)-1
    %continue from where you left off at the beginning
    if(shortenedModedData(s2MDIndex) < middleLine) && (shortenedModedData(s2MDIndex+1) > middleLine) %rising Edge

         if part == 0 %then you're looking at the first rising edge in the sequence
            
            R1 = s2MDIndex+1; %set the first rising edge
            riseEdge(riseEdgeIndex)=R1;
            riseEdgeIndex = riseEdgeIndex+1;
            
        elseif part == 1
        
            R2 = s2MDIndex+1; %set the second rising edge
            riseEdge(riseEdgeIndex)=R2;
            riseEdgeIndex = riseEdgeIndex+1;
            tempPulsePwrMinAvg = mean(shortenedModedData(F1:R2-1));
            pulsePwrAvgMinLine = (pulsePwrAvgMinLine *alpha) + (tempPulsePwrMinAvg*(1-alpha));
            
            %calculate and plot the middleLine using the pulsePwrAvgMaxLine
            %and pulsePwrAvgMinLine lines
            middleLine = (pulsePwrAvgMaxLine-pulsePwrAvgMinLine)/2 + pulsePwrAvgMinLine;
            %used to plot the middleLine progression at after the loop
            middleLinePlot = horzcat(middleLinePlot,middleLine*ones(1,R2-R1));
            
            R1=R2; %set the first rising edge to be the old second rising edge
            part = 1;
         end
        
    elseif(shortenedModedData(s2MDIndex) > middleLine) && (shortenedModedData(s2MDIndex+1) < middleLine) %falling Edge
         if part == 0%already found the first rising edge in the sequence
           
               F1 = s2MDIndex+1;
               %disp(F1);
               fallEdge(fallEdgeIndex) = F1;
               fallEdgeIndex=fallEdgeIndex+1;
               
               %find tempPulsePowerMovingMaxAverage (PPMMXA)
               tempPulsePwrMaxAvg = mean(shortenedModedData(R1:F1-1));
               pulsePwrAvgMaxLine = (pulsePwrAvgMaxLine*alpha) + (tempPulsePwrMaxAvg*(1-alpha));
               
                part=1;
      
        elseif part == 1
        
        F1 = s2MDIndex+1;
        fallEdge(fallEdgeIndex) = F1;
        fallEdgeIndex=fallEdgeIndex+1;
        
        
        tempPulsePwrMaxAvg = mean(shortenedModedData(R2:F1-1));
        pulsePwrAvgMaxLine = (pulsePwrAvgMaxLine*alpha) + (tempPulsePwrMaxAvg*(1-alpha));
        end

    end
end

%requirements
%{
        -the first average line is going to be the average of the data
        -take the average of the stuff between the rising edge and the
         falling edge and call that movingMax
        -take the average of the stuff between the falling edge and the
         next rising edge and call that movingMin
        -the middle line that must be calculated is (moiveMax-movingMin)/2
        -record a new middleLine every 10 periods (assuming you can
         determine what a period is)
        -is a rising edge if currIndex < middleLine &&
         currIndex+1>MiddleLine
        -is a falling edge if currIndex > middleLine &&
         currIndex+1<MiddleLine
        otherwise, put the between those points into arrays Marked
        highPointsArray and lowPointsArray
       -make sure to start on a rising edge but setting riseEdge[1] = -1
       and until it equals something greater than / not -1, then can't
       record a falling edge
%}

%///////////////////////////////////////////////////////////////////////////
%//Width //
%//////////

%Find the Distance between the rising and falling edges (pulse Width)

%takes the index of the position of the falling edge in the fallEdge
%array and subtract the position of the rising edge in the riseEdge array to
%find the distance between them. record the distance between them at the same index
%in the distanceBtRisingAndFallingIndex array. Take avg and std of that
%array

for distanceBtRisingAndFallingIndex = 1:1:length(fallEdge)-1
        distanceBtRisingAndFalling(distanceBtRisingAndFallingIndex) = (fallEdge(distanceBtRisingAndFallingIndex)-1)-riseEdge(distanceBtRisingAndFallingIndex);
end

if distanceBtRisingAndFalling(length(distanceBtRisingAndFalling))==0
   distanceBtRisingAndFalling = distanceBtRisingAndFalling(1: length(distanceBtRisingAndFalling));
end


avgWidth = mean(distanceBtRisingAndFalling);
stdWidth = std(distanceBtRisingAndFalling);

%///////////////////////////////////////////////////////////////////////////
%//Period//
%//////////

%Find the Distance between the rising edges = period

for risingEdgeIndex= 1:1:length(riseEdge)-1
    if riseEdge(risingEdgeIndex+1)-riseEdge(risingEdgeIndex)>=0 
        riseEdgeDistances(risingEdgeIndex) = riseEdge(risingEdgeIndex+1)-riseEdge(risingEdgeIndex);
    end
end

%AVG AND STD PERIOD
avgDistBtRising = mean(riseEdgeDistances);
stdDistBtRising = std(riseEdgeDistances);


%///////////////////////////////////////////////////////////////////////////
%//Exact Position where the edge crosses the middleLine//
%////////////////////////////////////////////////////////
%{
if exact == 1
    %pulse high and pulse low by finding the avg of the top of the signal
    %and the avg of the low  of the signal
    
    %upEnd and downEnd indicate over what period of samples the edge is being
    %measured. Default is 1
    upEnd = 1;
    downEnd =1;
    
    %how much to add to the index that is on riseEdge or fallEdge to
    %make sure it crosses the middleLine (is the real point of intersection
    riseEdgeAdd=0;
    fallEdgeAdd=0;
    
    %how much to add to riseEdge indexes
    for x = 0:10^(-decimalRound-1):upEnd
        upLine = round(pulseAmp*x,decimalRound);
        if (upLine == avgAmp)
            riseEdgeAdd=x;
        end
    end
    %how much to add to fallEdge indexes
    for x = 0:10^(-decimalRound-1):downEnd
        downLine = round((-pulseAmp*x)+pulseAmp,decimalRound);
        if (downLine == avgAmp)
            fallEdgeAdd=x;
        end
        
    end
    
    for index = 1:1:length(riseEdge)
        riseEdgeAccurate(index) = round(riseEdge(index),decimalRound) + riseEdgeAdd;
        fallEdgeAccurate(index) = round(fallEdge(index),decimalRound) + fallEdgeAdd;
        accuratedistanceBtFallRise(index) = fallEdgeAccurate(index)-riseEdgeAccurate(index);
    end
    
    riseEdge = riseEdgeAccurate;
    fallEdge = fallEdgeAccurate;
    
end
%}
% figure('Name', 'Falling vs Rising');
% plot(fallEdge(:));
% hold on; 
% plot(riseEdge);

end

